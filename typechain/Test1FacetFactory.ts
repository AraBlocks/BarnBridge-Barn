/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Test1Facet } from "./Test1Facet";

export class Test1FacetFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Test1Facet> {
    return super.deploy(overrides || {}) as Promise<Test1Facet>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Test1Facet {
    return super.attach(address) as Test1Facet;
  }
  connect(signer: Signer): Test1FacetFactory {
    return super.connect(signer) as Test1FacetFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test1Facet {
    return new Contract(address, _abi, signerOrProvider) as Test1Facet;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "something",
        type: "address",
      },
    ],
    name: "TestEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xf96e4b12",
        type: "bytes32",
      },
    ],
    name: "c_0xf96e4b12",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func10",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func11",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func12",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func13",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func14",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func15",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func16",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func17",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func18",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func19",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func4",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func6",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func7",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func8",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func9",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610603806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806371a99d6f116100b8578063b0e8fcc71161007c578063b0e8fcc7146101d2578063cbb835f6146101dc578063cd0bae09146101e6578063cf3bbe18146101f0578063db32da15146101fa578063ea26a7ba1461020457610137565b806371a99d6f146101a057806377e9d0d6146101aa57806381b5207d146101b457806387952d22146101be5780639abf97aa146101c857610137565b8063292c460d116100ff578063292c460d1461016e5780632cb83248146101785780634484b3b91461018257806350eb3f431461018c57806351b68a4d1461019657610137565b80630716c2ae1461013c578063110460471461014657806319c841ab1461015057806319e3b5331461015a57806324c1d5a714610164575b600080fd5b610144610232565b005b61014e610260565b005b61015861028e565b005b6101626102bc565b005b61016c6102ea565b005b610176610318565b005b610180610346565b005b61018a610374565b005b6101946103a2565b005b61019e6103d0565b005b6101a86103fe565b005b6101b261042c565b005b6101bc61045a565b005b6101c6610488565b005b6101d06104b6565b005b6101da6104e4565b005b6101e4610512565b005b6101ee610540565b005b6101f861056e565b005b61020261059c565b005b6102306004803603602081101561021a57600080fd5b81019080803590602001909291905050506105ca565b005b61025e7f337246819719cb3dd771551eac2561a155800c7963421682a3acbba7d86b9efd60001b6105ca565b565b61028c7fc1ace29ee35ef17d3dedabfe632961f7c3aea291aef8e3f4399a4261f66cc29f60001b6105ca565b565b6102ba7f080165963f4c6aa8d7d4fe42f7083a748bd62ead366b5763a1eaee2adccf480460001b6105ca565b565b6102e87fe80a0b35be4acd37e79a6ef4c07ecc263094b20d4f3898e4c771017fea756c2a60001b6105ca565b565b6103167f2285108c95c5f10ce58b451f3d42c1847401389f6f0131e89fe9860e6361c89b60001b6105ca565b565b6103447fccc1259b721bd258a3308921a81fd1f82e5ccdb99654a929aa1410a0828101e560001b6105ca565b565b6103727f7d912585157aeb98c95703228a2bec898cc7d9d14a8384fa1aabfd864375d5a860001b6105ca565b565b6103a07f3532b093365c8d79fdd94339379fdc23b12641980172deb9ab34e5f42bf4242d60001b6105ca565b565b6103ce7f11c9a919c01a061eeaa665b2ee4cfdb72591a6ab2bda1b8b87c840f5d2a1732c60001b6105ca565b565b6103fc7f87b72a50607e95d0bf7b48e1f69f6e319911393fdb2a169a9b391e96d50ae97260001b6105ca565b565b61042a7fb9ad0b95a34dae7d8fe05fb0e143bd1e16ce799a52830f663777ae1049607d7260001b6105ca565b565b6104587f694ef456217b0627b3e038609f5492b89678d1ae553a5678427b7783ebcfefba60001b6105ca565b565b6104867fd46c0b679e2d17aec323362d32ecf71064aabdb63c65eb45ec95afb6d3ee205960001b6105ca565b565b6104b47f64ee65754ea14affc41702882a7e47b7ab1713366ac9438cdc91c2f5860676ba60001b6105ca565b565b6104e27f0a702895f195f6cdd1d058e8562da4f1b26018be15d4041789f3dd7e9b0be3bb60001b6105ca565b565b6105107ff5cbb726f3743f90917bdf3caae418e2ceccb571d747f66ebac22c88f191d01f60001b6105ca565b565b61053e7f5abe79be2b1db8bc35147d333a02e5c3bafe71ed9d36fd8da1fd19f6ccd8af8e60001b6105ca565b565b61056c7fc94468a397b06cf0014b0054a0c1ccf42001fe6ca4efa35b172c0fac79cdc2e260001b6105ca565b565b61059a7fbe021840ba834dc904e8e96d087a21befc0fa5490c6cb85625e894c6942eadca60001b6105ca565b565b6105c87fffb66518c1a8355b0f4b9d3609bbee2adb968a31aafd182e4b52da47fef6fb9060001b6105ca565b565b5056fea264697066735822122023f8a24a1d446da580f365088690e6e4cac20a1ea781729d21816f6409074db964736f6c63430007030033";
