/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BarnMockInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "bondStaked()": FunctionFragment;
    "callRegisterUserAction(address)": FunctionFragment;
    "r()": FunctionFragment;
    "setBalance(address,uint256)": FunctionFragment;
    "setBondStaked(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bondStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callRegisterUserAction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "r", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondStaked",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callRegisterUserAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "r", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondStaked",
    data: BytesLike
  ): Result;

  events: {};
}

export class BarnMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BarnMockInterface;

  functions: {
    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bondStaked(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "bondStaked()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    callRegisterUserAction(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callRegisterUserAction(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    r(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "r()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setBalance(
      user: string,
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBalance(address,uint256)"(
      user: string,
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBondStaked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBondStaked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "bondStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  callRegisterUserAction(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callRegisterUserAction(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  r(overrides?: CallOverrides): Promise<string>;

  "r()"(overrides?: CallOverrides): Promise<string>;

  setBalance(
    user: string,
    balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBalance(address,uint256)"(
    user: string,
    balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBondStaked(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBondStaked(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "bondStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    callRegisterUserAction(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callRegisterUserAction(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    r(overrides?: CallOverrides): Promise<string>;

    "r()"(overrides?: CallOverrides): Promise<string>;

    setBalance(
      user: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBalance(address,uint256)"(
      user: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondStaked(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBondStaked(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "bondStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    callRegisterUserAction(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callRegisterUserAction(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    r(overrides?: CallOverrides): Promise<BigNumber>;

    "r()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBalance(
      user: string,
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBalance(address,uint256)"(
      user: string,
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBondStaked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBondStaked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bondStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callRegisterUserAction(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callRegisterUserAction(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "r()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBalance(
      user: string,
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBalance(address,uint256)"(
      user: string,
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBondStaked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBondStaked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
