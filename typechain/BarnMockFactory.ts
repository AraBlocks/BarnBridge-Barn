/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { BarnMock } from "./BarnMock";

export class BarnMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(rewards: string, overrides?: Overrides): Promise<BarnMock> {
    return super.deploy(rewards, overrides || {}) as Promise<BarnMock>;
  }
  getDeployTransaction(
    rewards: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(rewards, overrides || {});
  }
  attach(address: string): BarnMock {
    return super.attach(address) as BarnMock;
  }
  connect(signer: Signer): BarnMockFactory {
    return super.connect(signer) as BarnMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BarnMock {
    return new Contract(address, _abi, signerOrProvider) as BarnMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rewards",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bondStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "callRegisterUserAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "r",
    outputs: [
      {
        internalType: "contract IRewards",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setBondStaked",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104043803806104048339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610370806100946000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636c8ae38c1461006757806370a082311461009b5780637f5c4a07146100f3578063c2077e8114610121578063e30443bc1461013f578063f0bcb6cd1461018d575b600080fd5b61006f6101d1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100dd600480360360208110156100b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101f5565b6040518082815260200191505060405180910390f35b61011f6004803603602081101561010957600080fd5b810190808035906020019092919050505061023e565b005b610129610248565b6040518082815260200191505060405180910390f35b61018b6004803603604081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061024e565b005b6101cf600480360360208110156101a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610296565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b8060018190555050565b60015481565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366a7d821826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561031f57600080fd5b505af1158015610333573d6000803e3d6000fd5b505050505056fea2646970667358221220039246ed589b8859ac7a5fb981964ff4ac7c0f401b868fca77142af73df7dabe64736f6c63430007030033";
